# Generated by Django 2.0.1 on 2018-11-25 16:06

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('usertype', models.CharField(choices=[('1', 'Admin'), ('2', 'Accountant'), ('3', 'Staff')], max_length=2)),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='salary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=5, help_text='enter amount ', max_digits=10)),
                ('hra', models.DecimalField(decimal_places=4, help_text='enter hra', max_digits=6)),
                ('ma', models.DecimalField(decimal_places=4, help_text='enter ma', max_digits=6)),
                ('da', models.DecimalField(decimal_places=4, help_text='enter da', max_digits=6)),
                ('pay_grade', models.CharField(help_text='Enter field documentation', max_length=5)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='BankProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_ifsc', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_accountno', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('job_title', models.CharField(blank=True, choices=[('P1', 'Professor'), ('P2', 'Associate Professor'), ('P3', 'Assistant Professor'), ('L1', 'Lab Assistant')], max_length=4)),
                ('department', models.CharField(blank=True, choices=[('CSE', 'Computer Science and Engineering '), ('ME', 'Mechanical Engineering'), ('ECE', 'Electronics & Communication Engineering'), ('EEE', 'Electrical & Electronics Engineering'), ('CE', 'Civil Engineering'), ('AE', 'Automobile Engineering'), ('BSH', 'Basic Science and Humanities')], max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('dob', models.DateField(default=datetime.date.today)),
                ('phone_code', models.CharField(blank=True, choices=[('+91', 'India(+91)'), ('+1', 'USA(+1)')], max_length=3)),
                ('phone_number', models.CharField(default=0, max_length=10, validators=[django.core.validators.RegexValidator(message='Phone number must be 10 digits number.', regex='^\\d{10}$')])),
                ('street1', models.CharField(blank=True, default='', max_length=5)),
                ('street2', models.CharField(blank=True, default='', max_length=50)),
                ('city', models.CharField(blank=True, default='', max_length=50)),
                ('state', models.CharField(blank=True, default='', max_length=50)),
                ('pincode', models.CharField(blank=True, default='', max_length=6, validators=[django.core.validators.RegexValidator(message='PINCODE must be 6 digits number.', regex='^\\d{6}$')])),
            ],
        ),
        migrations.AddField(
            model_name='salary',
            name='employee_name',
            field=models.ForeignKey(help_text='enter name', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
